<listeners>
 <listener class-name="com.qa.utility.Reporting"></listener>
 </listeners>

====================================================================================
package com.qa.utility;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.TestListenerAdapter;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class Reporting extends TestListenerAdapter{



	public ExtentHtmlReporter htmlReporter;
	public ExtentReports xReports;
	public ExtentTest xTest;



	// Loc configuration to capture the extent report (format, infor, etc..)
	public void onStart(ITestContext testContext) {

		String dateStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		String repName = "Test-Automation-Report"+dateStamp+".html";

		htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir")+"/Reports/"+repName);
		//ExtentHtmlReporter report=new ExtentHtmlReporter("./Reports/cleartrip.html");
		htmlReporter.config().setDocumentTitle("Automation Report");
		htmlReporter.config().setReportName("Functional Test Report");
		htmlReporter.config().setTheme(Theme.DARK);
		htmlReporter.config().setAutoCreateRelativePathMedia(true);

		
		xReports = new ExtentReports();
		xReports.attachReporter(htmlReporter);
		xReports.setSystemInfo("hostName", "localhost");
		xReports.setSystemInfo("OS", "Windows");
		xReports.setSystemInfo("QA", "Vikkram");
		
		
	}

	// configuration / loc to execute after the results are captured
	public void onFinish(ITestContext testContext) {
		xReports.flush();

	}
	
	// method to read the test results of the methods annotated as @Test, when the test is passed and executed via testng.xml file

	// test should make an entry into the extent report, if it passed
	public void onTestSuccess(ITestResult tr) {
		xTest = xReports.createTest(tr.getName()); // make an entry to the extent report
		xTest.log(Status.PASS, "Test is passed");
		xTest.log(Status.PASS, MarkupHelper.createLabel(tr.getName(), ExtentColor.GREEN));

	}


	// test should make an entry into the extent report, if it failed
	public void onTestFailure(ITestResult tr) {
		xTest = xReports.createTest(tr.getName()); // make an entry to the extent report
		xTest.log(Status.FAIL, "Test is failed");
		xTest.log(Status.FAIL, tr.getThrowable());
		xTest.log(Status.FAIL, MarkupHelper.createLabel(tr.getName(), ExtentColor.RED));
		
		String SSPath = System.getProperty("user.dir")+"/Screenshots/"+tr.getName()+".png";
		
		File file = new File(SSPath);
		if(file.exists()) {
			try {
				xTest.fail("The screenshot for test failed is : " + xTest.addScreenCaptureFromPath(SSPath));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		

	}


	// test should make an entry into the extent report, if it skipped
	public void onTestSkipped(ITestResult tr) {
		xTest = xReports.createTest(tr.getName()); // make an entry to the extent report
		xTest.log(Status.SKIP, "Test is skipped");
		xTest.log(Status.SKIP, tr.getThrowable());
		xTest.log(Status.SKIP, MarkupHelper.createLabel(tr.getName(), ExtentColor.AMBER));


	}

}

====================================================================================

package com.qa.testscript;
import java.awt.Desktop.Action;
import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.qa.testscript.TestBase;
import com.qa.utility.ExcelUtility;
import com.qa.pages.*;
public class TC_001_flightsearch extends TestBase
{
	private int rowCount;
  @Test(dataProvider="getData")
 
  public void searchItem(String Totrip,String Fromtrip) throws InterruptedException,IOException 
  {
	  SoftAssert SAssert = new SoftAssert();
	   Actions builder=new Actions(driver);
	    fpages.getradiocheck();
	    fpages.setfromfield().clear();
		 fpages.setfromfield().sendKeys(Totrip);    
	 fpages.setTofield().sendKeys(Fromtrip);
	 boolean contains = driver.getTitle().contentEquals(Totrip);
	 if(contains) {
			SAssert.assertTrue(true);		
			Reporter.log("Title has the search term",true);
			List<WebElement> allItems = fpages.getAllItems();
			System.out.println("Total no. of items loaded are : " +  allItems.size());

			for(WebElement item:allItems) {
				
				Reporter.log(item.getText());
		}
	 
  }
  else 
  {
		captureScreenshot(driver,"searchItem");
		SAssert.assertTrue(false);
		Reporter.log("Incorrect title",true);
	}
	 SAssert.assertAll();
}
  @DataProvider
	public String[][] getData() throws IOException {
		
		String xFile="C:\\eclipse\\cleartrip\\src\\test\\java\\com\\qa\\testdata\\TestData.xlsx";
		String xSheet="Sheet1";
		
		int rowCount = ExcelUtility.getRowCount(xFile, xSheet);
		int cellCount = ExcelUtility.getCellCount(xFile, xSheet, rowCount);
		
		String[][] data = new String[rowCount][cellCount];
		
		for(int i=1; i<=rowCount; i++) {
			for(int j=0;j<cellCount;j++) {
				data[i-1][j] = ExcelUtility.getCellData(xFile, xSheet, i, j);
			}
		}
		return data;
		
}
}

====================================================================================

package com.qa.testscript;
import java.io.File;
import com.qa.pages.MercuryPage;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import com.qa.pages.flightpages;

public class TestBase 
{
 WebDriver driver;
 flightpages fpages;
 FileInputStream fileLoc;
 MercuryPage NewToursOR;
	Properties prop;
 @Parameters({"Browser", "Url"})
 
	@BeforeClass
	public void setUp(String Browser,String Url)throws IOException
	{
	  fileLoc=new FileInputStream("C:\\eclipse\\cleartrip\\src\\test\\java\\com\\qa\\testdata\\credentials.properties");
	  prop=new Properties();
	  prop.load(fileLoc);
	  if(Browser.equalsIgnoreCase("Chrome"))
	  {
		  System.setProperty("webdriver.chrome.driver","C:\\webdriver\\chromedriver.exe" );
		  driver=new ChromeDriver();
	  }
	  else if(Browser.equalsIgnoreCase("Edge"))
	  {
		System.setProperty("webdriver.edge.driver", "C:\\webdriver\\msedgedriver.exe");
		driver=new EdgeDriver();
	  }
	  driver.get(Url);
	  driver.manage().window().maximize();
	  fpages=new flightpages(driver); 
	  NewToursOR=new MercuryPage(driver);
	  //Actions builder=new Actions(driver);
	  
	}
 @AfterClass
 public void tearDown() throws IOException
 {
	 driver.close();
 }
 public void captureScreenshot(WebDriver driver, String tName) throws IOException {
		
		TakesScreenshot ts = (TakesScreenshot)driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		File target = new File(System.getProperty("user.dir")+"/Screenshots/"+tName+".png");		
		FileUtils.copyFile(source, target);
		
	}
}
 

=====================================================================

https://www.amazon.in/
